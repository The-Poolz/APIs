using System;
using System.Text;
using System.Data;
using System.Text.Json;
using System.Data.Common;
using System.Collections.Generic;

namespace QuickSQL.DataReader
{
    /// <summary>
    /// An <see langword="abstract"/> class that abstracts data reading.<br/>
    /// For your DataReader to work, you need to define the <see cref="CreateConnection"/> and <see cref="CreateReader"/> method.
    /// </summary>
    public abstract class BaseDataReader
    {
        /// <summary>
        /// Read json data from database.
        /// </summary>
        /// <param name="commandQuery">Pass a command query generated by a child of the BaseQueryCreator class.</param>
        /// <param name="connectionString">Pass connection string to database.</param>
        /// <returns>Return JSON string. Return array if two or more objects, or return single object.</returns>
        public string GetJsonData(string commandQuery, string connectionString)
        {
            using var connection = CreateConnection(connectionString);
            connection.Open();
            var reader = CreateReader(commandQuery, connection);

            string stringJson = ReadData(reader);

            return CreateResult(stringJson);
        }
        /// <summary>
        /// Checks to return an array or a single object or empty JSON.
        /// </summary>
        /// <param name="json">Pass a JSON string.</param>
        /// <returns>Return JSON string. Return array if two or more objects, or return single object.</returns>
        public static string CreateResult(string json)
        {
            List<object> jsonList = JsonSerializer.Deserialize<List<object>>($"[{json}]");
            int resultCount = jsonList.Count;
            string emptyJson = "[]";

            if (resultCount == 0)
                return emptyJson;

            if (resultCount > 1)
                json = $"[{json}]";

            return json.Replace(" ", "", StringComparison.Ordinal);
        }
        /// <summary>
        /// Read data from reader.
        /// </summary>
        /// <param name="reader">Pass <see cref="DbDataReader"/> to read data.</param>
        /// <returns>Return JSON string.</returns>
        public static string ReadData(IDataReader reader)
        {
            StringBuilder jsonResult = new();
            while (reader.Read())
            {
                jsonResult.Append(reader.GetValue(0).ToString());
            }
            return jsonResult.ToString();
        }

        /// <summary>
        /// Create and return <see cref="DbConnection"/> for provider.
        /// </summary>
        /// <param name="connectionString">Connection string for <see cref="DbConnection"/> object.</param>
        /// <returns>Return connection object.</returns>
        public abstract DbConnection CreateConnection(string connectionString);
        /// <summary>
        /// Create and return <see cref="DbConnection"/> for provider.
        /// </summary>
        /// <param name="commandQuery">Pass a command query generated by a child of the BaseQueryCreator class.</param>
        /// <param name="connection">Pass connection object for create reader.</param>
        /// <returns>Return reader object.</returns>
        public abstract DbDataReader CreateReader(string commandQuery, DbConnection connection);
    }
}
