using System;
using System.Text;
using System.Data.Common;

namespace QuickSQL.DataReader
{
    /// <summary>
    /// An <see langword="abstract"/> class that abstracts data reading.<br/>
    /// For your DataReader to work, you need to define the <see cref="CreateConnection"/> and <see cref="CreateReader"/> method.
    /// </summary>
    public abstract class BaseDataReader
    {
        /// <summary>
        /// Read json data from database.
        /// </summary>
        /// <param name="commandQuery">Pass a command query generated by a child of the BaseQueryCreator class.</param>
        /// <param name="connectionString">Pass connection string to database.</param>
        /// <returns>Return JSON string. Return array id two or more objects, or return single object.</returns>
        public string GetJsonData(string commandQuery, string connectionString)
        {
            using var connection = CreateConnection(connectionString);
            connection.Open();
            var reader = CreateReader(commandQuery, connection);

            StringBuilder jsonResult = new();
            while (reader.Read())
            {
                jsonResult.Append(reader.GetValue(0).ToString());
            }

            string stringJson = jsonResult.ToString();
            // Return empty json if data nullable or empty
            string emptyJson = "[]";
            if (string.IsNullOrEmpty(stringJson))
                return emptyJson;
            // Return array
            if ((stringJson.Contains("},{", StringComparison.Ordinal)
                || stringJson.Contains("}, {", StringComparison.Ordinal))
                && !stringJson.StartsWith("[", StringComparison.Ordinal)) // This rule for MySql provider. MySql return always [result]
            {
                stringJson = $"[{stringJson}]";
            }
            // Return single object
            return stringJson.Replace(" ", "", StringComparison.Ordinal);
        }

        /// <summary>
        /// Create and return <see cref="DbConnection"/> for provider.
        /// </summary>
        /// <param name="connectionString">Connection string for <see cref="DbConnection"/> object.</param>
        /// <returns>Return connection object.</returns>
        public abstract DbConnection CreateConnection(string connectionString);
        /// <summary>
        /// Create and return <see cref="DbConnection"/> for provider.
        /// </summary>
        /// <param name="commandQuery">Pass a command query generated by a child of the BaseQueryCreator class.</param>
        /// <param name="connection">Pass connection object for create reader.</param>
        /// <returns>Return reader object.</returns>
        public abstract DbDataReader CreateReader(string commandQuery, DbConnection connection);
    }
}
